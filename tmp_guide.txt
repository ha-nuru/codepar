

1)디렉토리 구조

2)네이밍 규칙

  1.기본 규칙
  2.id 및 class 네이밍 규칙
  3.이미지 네이밍 규칙
  4.디렉토리 네이밍 규칙
  
3)HTML 코드 작성 규칙

  1.레이아웃
    1-1.HTML Depth 
    1-2.HTML Depth Role
    1-3.Web layout (pc, mobile)
    1-4.약속어
    
  2.기본 규칙
    2-1.표기법
    2-2.빈 줄
    2-3.주석
      2-3-1.기본 형식
      2-3-2.레이아웃 및 콘텐츠 영역의 주석 표기
      2-3-3.개발 적용과 관련된 주석 표기

4)CSS 코드 작성 규칙

  1.기본 규칙
    1-1.표기법
    1.2.공백
    1-3.빈 줄
    1-4.주석

  2.CSS 파일 역할
  
5)Elements 마크업 (웹 접근성 준수) 
 1.buttons
 2.input
  2-1 type 속성
  2-2 text
  2-3 checkbox
  2-4 radio
 3.table
 4.select
 5.tab 

6)반응형
  1.분기점
    1-1.모바일
    1-2.PC

7)코딩 시 참고 사항
  1.Plugin/ Library
  2.웹 접근성 테스트 사이트
  3.URL ROOT
  4.Safe-Area 대응 (IOS 11 이상)

------------------------------------------
1. 컨벤션
 1~7 (5미포함)
2. 자주쓰는 Elements
 - 5)
3. 웹접근성 - 차주 중 본용

센스리더 준수(기준 v8.0)
https://www.xvtech.com/services - 센스리더 설치
https://nuli.navercorp.com/community/article/1081603 - 센스리더 가이드

HTML 웹 접근성 가이드:

1.시맨틱 마크업: 의미에 맞는 태그를 사용하여 문서의 구조와 내용을 명확하게 표현합니다. 예를 들면, <nav>, <header>, <footer>, <aside> 등을 사용하여 문서의 구조를 나타냅니다.
2.제목 태그 사용: <h1>부터 <h6>까지의 제목 태그를 사용하여 문서의 구조를 표현하고, 각 섹션의 의미를 명확하게 전달합니다.
3.이미지 대체 텍스트: <img> 태그의 alt 속성을 사용하여 이미지의 대체 텍스트를 제공하여 시각 장애인 등의 사용자가 이미지의 내용을 이해할 수 있도록 합니다.
4.폼 레이블: <label> 태그를 사용하여 폼 요소에 레이블을 제공하고, for 속성과 id 속성을 연결하여 레이블과 폼 요소를 연결합니다.
5.키보드 접근성: 키보드로 모든 기능을 사용할 수 있도록 설계하고, <a>, <button>, <input> 등의 요소에 :focus 스타일을 적용하여 키보드 포커스가 있는 요소를 시각적으로 표시합니다.

CSS 웹 접근성 가이드:

1.명확한 색상 대비: 텍스트와 배경 색상의 대비를 충분히 확보하여 색상이 제한된 사용자가 내용을 읽을 수 있도록 합니다.
2.유연한 레이아웃: 뷰포트 크기가 변경되어도 콘텐츠가 읽기 쉽게 유지되도록 유연한 레이아웃을 설계합니다. 예를 들면, em, %, vw, vh 등의 상대 단위를 사용합니다.
3.숨김 콘텐츠 접근성: display: none 등으로 숨겨진 콘텐츠에 대해 스크린 리더 사용자가 해당 내용을 이해할 수 있도록 대체 텍스트나 레이블을 제공합니다.
4.키보드 접근성: CSS로 만든 UI 요소가 키보드로 조작 가능하도록 하고, :focus 스타일을 사용하여 키보드 포커스가 있는 요소를 시각적으로 표시합니다.
5. 레이아웃의 논리적인 순서: CSS의 flexbox, grid 등을 사용하여 레이아웃을 구성할 때, 문서의 논리적인 순서와 일치하도록 합니다.

JavaScript 웹 접근성 가이드:

1.접근성을 고려한 이벤트 핸들링: JavaScript를 사용하여 이벤트를 처리할 때, 키보드 이벤트와 마우스 이벤트를 모두 고려하여 접근성을 확보합니다. 예를 들면, keydown, keyup 이벤트 등을 활용하여 키보드 사용자를 고려한 이벤트 핸들링을 구현합니다.
2.접근성을 고려한 오류 처리: 폼 검증 등의 오류 처리 시, 시각적인 피드백 뿐만 아니라 스크린 리더를 사용하는 사용자를 고려한 오류 처리를 구현합니다.
3.동적 콘텐츠의 접근성: JavaScript를 사용하여 동적으로 콘텐츠를 추가 또는 제거하는 경우, 해당 콘텐츠에 대한 접근성을 고려하여 스크린 리더 사용자가 해당 콘텐츠를 인식할 수 있도록 합니다.
4.키보드 포커스 관리: JavaScript를 사용하여 동적으로 UI 요소를 조작할 때, 키보드 포커스를 관리하여 키보드 사용자가 원활하게 이용할 수 있도록 합니다.

4. 산출물(가이드,파일리스트)
 - ex/ http://ts5000.ipdisk.co.kr:89/guide/guide_rule_CSS.html